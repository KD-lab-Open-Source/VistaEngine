#ifndef __COMMON_LOC_TEXT_H__
#define __COMMON_LOC_TEXT_H__

//#include "Handle.h"
#include "LibraryWrapper.h"
#include "LocString.h"

enum UI_CommonLocText {
	UI_COMMON_TEXT_DEFAULT,
	UI_COMMON_TEXT_ANY_GAME,
	UI_COMMON_TEXT_ANY_RACE,
	UI_COMMON_TEXT_ALL_GAMES,
	UI_COMMON_TEXT_ANY_UNITS_SIZE,
	UI_COMMON_TEXT_YES,
	UI_COMMON_TEXT_NO,
	UI_COMMON_TEXT_STAT_FREE_FOR_ALL,
	UI_COMMON_TEXT_STAT_1_VS_1,
	UI_COMMON_TEXT_STAT_2_VS_2,
	UI_COMMON_TEXT_STAT_3_VS_3,
	UI_COMMON_TEXT_CUSTOM_GAME,
	UI_COMMON_TEXT_PREDEFINE_GAME,
	UI_COMMON_TEXT_GAME_RUNNING,
	UI_COMMON_TEXT_GAME_NOT_RUNNING,
	UI_COMMON_TEXT_NAT_TYPE_OPEN,
	UI_COMMON_TEXT_NAT_TYPE_MODERATE,
	UI_COMMON_TEXT_NAT_TYPE_STRICT,
	UI_COMMON_TEXT_NAT_COMPATIBLE,
	UI_COMMON_TEXT_NAT_INCOMPATIBLE,
	UI_COMMON_TEXT_INDIVIDUAL_LAN_GAME,
	UI_COMMON_TEXT_CONNECTING,
	UI_COMMON_TEXT_YOU_ENTER_CHAT_ROOM,
	UI_COMMON_TEXT_USER_ENTER_CHAT_ROOM,
	UI_COMMON_TEXT_USER_LEAVE_CHAT_ROOM,
	UI_COMMON_TEXT_TEEM_LAN_GAME,
	UI_COMMON_TEXT_PLAYER_DISCONNECTED,
	UI_COMMON_TEXT_ERROR_CANT_CONNECT,
	UI_COMMON_TEXT_ERROR_DISCONNECT,
	UI_COMMON_TEXT_ERROR_DISCONNECT_MULTIPLE_LOGON,
	UI_COMMON_TEXT_ERROR_SESSION_TERMINATE,
	UI_COMMON_TEXT_ERROR_DESINCH,
	UI_COMMON_TEXT_ERROR_CONNECTION_GAME_IS_RUN,
	UI_COMMON_TEXT_ERROR_CONNECTION_GAME_IS_FULL,
	UI_COMMON_TEXT_ERROR_CONNECTION,
	UI_COMMON_TEXT_ERROR_CONNECTION_GAME,
	UI_COMMON_TEXT_ERROR_INCORRECT_VERSION,
	UI_COMMON_TEXT_ERROR_ACCOUNT_BAD_PASSWORD,
	UI_COMMON_TEXT_ERROR_ACCOUNT_BAD_NAME,
	UI_COMMON_TEXT_ERROR_ACCOUNT_UNKNOWN_NAME,
	UI_COMMON_TEXT_ERROR_ACCOUNT_INCORRECT_PASSWORD,
	UI_COMMON_TEXT_ERROR_ACCOUNT_VULGAR_NAME,
	UI_COMMON_TEXT_ERROR_ACCOUNT_LOCKED,
	UI_COMMON_TEXT_ERROR_ACCOUNT_NAME_EXIST,
	UI_COMMON_TEXT_ERROR_ACCOUNT_CREATE,
	UI_COMMON_TEXT_ERROR_ACCOUNT_CREATE_MAX,
	UI_COMMON_TEXT_ERROR_ACCOUNT_CREATE_BAD_LIC,
	UI_COMMON_TEXT_ERROR_ACCOUNT_CHANGE_PASSWORD,
	UI_COMMON_TEXT_ERROR_ACCOUNT_DELETE,
	UI_COMMON_TEXT_ERROR_CREATE_GAME,
	UI_COMMON_TEXT_ERROR_UNKNOWN,
	UI_COMMON_TEXT_ERROR_OPEN,
	UI_COMMON_TEXT_ERROR_SAVE,
	UI_COMMON_TEXT_ERROR_GRAPH_INIT,
	UI_COMMON_TEXT_SLOT_OPEN,
	UI_COMMON_TEXT_SLOT_CLOSED,
	UI_COMMON_TEXT_SLOT_AI,
	UI_COMMON_TEXT_AI,
	UI_COMMON_TEXT_TIME_AM,
	UI_COMMON_TEXT_TIME_PM,
	UI_COMMON_TEXT_LANG_ENGLISH,
	UI_COMMON_TEXT_LANG_RUSSIAN,
	UI_COMMON_TEXT_LANG_GERMAN,
	UI_COMMON_TEXT_LANG_FRENCH,
	UI_COMMON_TEXT_LANG_SPANISH,
	UI_COMMON_TEXT_LANG_ITALIAN,
	UI_COMMON_TEXT_CUSTOM_PRESET,
	UI_COMMON_TEXT_DISABLED,
	UI_COMMON_TEXT_SHADOW_CIRCLE,
	UI_COMMON_TEXT_SHADOW_BAD,
	UI_COMMON_TEXT_SHADOW_GOOD,
	UI_COMMON_TEXT_TEXTURE_LOW,
	UI_COMMON_TEXT_TEXTURE_MEDIUM,
	UI_COMMON_TEXT_TEXTURE_GOOD,
	UI_COMMON_TEXT_EFFECT_SMOOTH_TERRAIN,
	UI_COMMON_TEXT_EFFECT_SMOOTH_FULL,
	UI_COMMON_TEXT_HIGH_QA,
	UI_COMMON_TEXT_LOW_QA,
	UI_COMMON_TEXT_LAST_ENUM
};

class CommonLocText : public LibraryWrapper<CommonLocText>
{
public:
	CommonLocText();
	~CommonLocText();

	const char* getText(UI_CommonLocText text_id) const;
	UI_CommonLocText getId(const char* text) const;
	void update();
	void serialize(Archive& ar);
private:
	typedef vector<LocString> LocTextVector;
	LocTextVector locTexts_;
	LocTextVector anyTexts_;
};

const char* getLocString(UI_CommonLocText id, const char* def = 0);
UI_CommonLocText getLocStringId(const char* text);

#define GET_LOC_STR(ID) getLocString((ID), #ID)

#endif /* __COMMON_LOC_TEXT_H__ */
